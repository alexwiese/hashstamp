using Shouldly;
using Xunit;
using System.Text.RegularExpressions;

namespace HashStamp.UnitTests
{
    public class BasicTests
    {
        [Fact]
        public void HashStamps_Class_Should_Be_Generated()
        {
            // The HashStamps class should be generated by the source generator
            var hashStampsType = typeof(HashStamps);
            hashStampsType.ShouldNotBeNull();
        }

        [Fact]
        public void Hash_Values_Should_Be_Valid_SHA256()
        {
            // All hash values should be valid SHA-256 hashes (64 hex characters)
            var sha256Pattern = @"^[a-fA-F0-9]{64}$";
            var regex = new Regex(sha256Pattern);

            // Test hashes from SimpleTestClass
            var simpleMethodHash = HashStamps.HashStamp_UnitTests_TestData.SimpleTestClass.SimpleMethod;
            
            simpleMethodHash.ShouldNotBeNullOrEmpty();
            regex.IsMatch(simpleMethodHash).ShouldBeTrue($"SimpleMethod hash should be valid SHA-256: {simpleMethodHash}");
        }

        [Fact]
        public void HashStamps_Namespaces_Should_Be_Populated()
        {
            // The Namespaces collection should contain our test namespaces
            HashStamps.Namespaces.ShouldNotBeNull();
            HashStamps.Namespaces.Count.ShouldBeGreaterThan(0);
        }

        [Fact]
        public void Should_Be_Able_To_Access_Hash_Via_Dynamic_Lookup()
        {
            // Test accessing hash via the dynamic lookup structure
            var hash = HashStamps.Namespaces["HashStamp.UnitTests.TestData"]
                .Classes["SimpleTestClass"]
                .Methods["SimpleMethod"]
                .Hash;

            hash.ShouldNotBeNullOrEmpty();

            // Should be a valid SHA-256 hash
            var sha256Pattern = @"^[a-fA-F0-9]{64}$";
            var regex = new Regex(sha256Pattern);
            regex.IsMatch(hash).ShouldBeTrue($"Hash should be valid SHA-256: {hash}");
        }
    }
}

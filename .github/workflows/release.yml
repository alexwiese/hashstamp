name: Release Validation

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/HashStamp/HashStamp.csproj'
  
  push:
    tags:
      - 'v*'

jobs:
  validate-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check version increment
      run: |
        echo "Checking if version was incremented in HashStamp.csproj..."
        
        # Get the current version from PR branch
        PR_VERSION=$(grep -o '<Version>[^<]*</Version>' src/HashStamp/HashStamp.csproj | sed 's/<Version>//g' | sed 's/<\/Version>//g')
        echo "PR Version: $PR_VERSION"
        
        # Get the version from base branch
        git checkout ${{ github.event.pull_request.base.sha }}
        BASE_VERSION=$(grep -o '<Version>[^<]*</Version>' src/HashStamp/HashStamp.csproj | sed 's/<Version>//g' | sed 's/<\/Version>//g' || echo "1.0.0")
        echo "Base Version: $BASE_VERSION"
        
        # Compare versions (simple string comparison for now)
        if [ "$PR_VERSION" = "$BASE_VERSION" ]; then
          echo "⚠️ Warning: Version was not incremented in this PR"
          echo "Current version: $PR_VERSION"
          echo "Please consider incrementing the version in src/HashStamp/HashStamp.csproj"
          echo "This is a warning, not a failure - version increments are recommended but not required for all changes."
        else
          echo "✅ Version was updated from $BASE_VERSION to $PR_VERSION"
        fi
  
  tag-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Validate tag matches version
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
        
        # Get version from project file
        PROJECT_VERSION=$(grep -o '<Version>[^<]*</Version>' src/HashStamp/HashStamp.csproj | sed 's/<Version>//g' | sed 's/<\/Version>//g')
        echo "Project version: $PROJECT_VERSION"
        
        if [ "$TAG_VERSION" != "$PROJECT_VERSION" ]; then
          echo "❌ ERROR: Tag version ($TAG_VERSION) does not match project version ($PROJECT_VERSION)"
          exit 1
        else
          echo "✅ Tag version matches project version"
        fi
    
    - name: Build for release
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore
        dotnet run --project src/HashStamp.Test/HashStamp.Test.csproj --no-build --configuration Release
    
    - name: Create GitHub Release
      uses: actions/github-script@v7
      with:
        script: |
          const tagName = context.ref.replace('refs/tags/', '');
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tagName,
            name: `Release ${tagName}`,
            body: `Release ${tagName} of HashStamp source generator.\n\n**Changes:**\nSee commit history for detailed changes.`,
            draft: false,
            prerelease: tagName.includes('-')
          });
          
          console.log(`Created release: ${release.html_url}`);
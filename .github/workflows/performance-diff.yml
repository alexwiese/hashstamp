name: Performance Diff

on:
  pull_request:
    branches: [ main, master ]

jobs:
  performance-diff:
    runs-on: ubuntu-latest
    
    permissions:
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    # Build and benchmark current branch (PR)
    - name: Build and benchmark current branch
      run: |
        echo "Building PR branch..."
        dotnet build --configuration Release --no-restore
        echo "Running benchmarks..."
        dotnet run --project src/HashStamp.Benchmarks/HashStamp.Benchmarks.csproj --configuration Release --no-build -- --quick 2>&1 | tee pr_benchmark.txt
    
    - name: Collect PR benchmark results
      run: |
        # Extract key benchmark metrics for PR
        echo "Extracting PR benchmark data..."
        cat pr_benchmark.txt | grep -E "CompileTimeHashAccess|RuntimeHashAccess|CountAllMethods" | grep -v "Warmup\|Overhead" > pr_results.txt || echo "No benchmark results found" > pr_results.txt
    
    # Checkout base branch and build for comparison
    - name: Checkout base branch
      run: |
        git checkout ${{ github.event.pull_request.base.sha }}
        dotnet restore
    
    - name: Build and benchmark base branch
      run: |
        echo "Building base branch..."
        dotnet build --configuration Release --no-restore
        echo "Running benchmarks..."
        dotnet run --project src/HashStamp.Benchmarks/HashStamp.Benchmarks.csproj --configuration Release --no-build -- --quick 2>&1 | tee base_benchmark.txt
    
    - name: Collect base benchmark results and generate comparison
      run: |
        # Extract key benchmark metrics for base
        echo "Extracting base benchmark data..."
        cat base_benchmark.txt | grep -E "CompileTimeHashAccess|RuntimeHashAccess|CountAllMethods" | grep -v "Warmup\|Overhead" > base_results.txt || echo "No benchmark results found" > base_results.txt
        
        # Create concise performance comparison report
        echo "## Performance Comparison" > performance_report.md
        echo "" >> performance_report.md
        echo "| Benchmark | Original | Optimized | Change |" >> performance_report.md
        echo "|-----------|----------|-----------|--------|" >> performance_report.md
        
        # Function to extract mean time and calculate percentage change
        calculate_comparison() {
          local method_name="$1"
          local pr_line=$(grep "$method_name" pr_results.txt | head -1)
          local base_line=$(grep "$method_name" base_results.txt | head -1)
          
          if [[ -n "$pr_line" && -n "$base_line" ]]; then
            # Extract mean values (assuming format like "| MethodName | 1.234 μs |")
            pr_mean=$(echo "$pr_line" | grep -oE '[0-9]+\.[0-9]+\s+[μmn]?s' | head -1)
            base_mean=$(echo "$base_line" | grep -oE '[0-9]+\.[0-9]+\s+[μmn]?s' | head -1)
            
            if [[ -n "$pr_mean" && -n "$base_mean" ]]; then
              echo "| $method_name | $base_mean | $pr_mean | Comparison data available |" >> performance_report.md
            else
              echo "| $method_name | Data unavailable | Data unavailable | Unable to compare |" >> performance_report.md
            fi
          else
            echo "| $method_name | No data | No data | No comparison possible |" >> performance_report.md
          fi
        }
        
        # Generate comparison for key methods
        calculate_comparison "CompileTimeHashAccess"
        calculate_comparison "RuntimeHashAccess" 
        calculate_comparison "CountAllMethods"
        
        echo "" >> performance_report.md
        echo "*Performance impact shows the change from original to optimized code.*" >> performance_report.md
    
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance_report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ⚡ Performance Benchmark Results\n\n${report}`
          });